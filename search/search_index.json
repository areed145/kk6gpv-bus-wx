{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation Class that listens for new weather station observations __init__ ( self ) special Initialize class Source code in bus_wx/bus_wx.py def __init__ ( self ): \"\"\"Initialize class\"\"\" self . fail_init () self . fail_max = 30 self . wws = WxWebSocket () self . loop = asyncio . get_event_loop () self . run () fail_check ( self ) Check for failure count Source code in bus_wx/bus_wx.py def fail_check ( self ): \"\"\"Check for failure count\"\"\" self . fail_count += 1 self . logger . warning ( \"couldn't connect {0} time(s)\" . format ( str ( self . fail_count )) ) if self . fail_count > self . fail_max - 1 : self . logger . error ( \"exiting...\" ) os . remove ( \"healthy\" ) sys . exit ( 1 ) fail_init ( self ) Initialize check for failure Source code in bus_wx/bus_wx.py def fail_init ( self ): \"\"\"Initialize check for failure\"\"\" self . fail_count = 0 with open ( \"healthy\" , \"w\" ) as fp : fp . write ( \"healthy\" ) pass run ( self ) Run the bus Source code in bus_wx/bus_wx.py def run ( self ): \"\"\"Run the bus\"\"\" while True : try : self . loop . run_until_complete ( self . __async__run ()) self . fail_init () except Exception as e : self . logger . error ( str ( e )) time . sleep ( 10 ) self . fail_check ()","title":"Reference"},{"location":"#documentation","text":"Class that listens for new weather station observations","title":"Documentation"},{"location":"#bus_wx.bus_wx.BusWx.__init__","text":"Initialize class Source code in bus_wx/bus_wx.py def __init__ ( self ): \"\"\"Initialize class\"\"\" self . fail_init () self . fail_max = 30 self . wws = WxWebSocket () self . loop = asyncio . get_event_loop () self . run ()","title":"__init__()"},{"location":"#bus_wx.bus_wx.BusWx.fail_check","text":"Check for failure count Source code in bus_wx/bus_wx.py def fail_check ( self ): \"\"\"Check for failure count\"\"\" self . fail_count += 1 self . logger . warning ( \"couldn't connect {0} time(s)\" . format ( str ( self . fail_count )) ) if self . fail_count > self . fail_max - 1 : self . logger . error ( \"exiting...\" ) os . remove ( \"healthy\" ) sys . exit ( 1 )","title":"fail_check()"},{"location":"#bus_wx.bus_wx.BusWx.fail_init","text":"Initialize check for failure Source code in bus_wx/bus_wx.py def fail_init ( self ): \"\"\"Initialize check for failure\"\"\" self . fail_count = 0 with open ( \"healthy\" , \"w\" ) as fp : fp . write ( \"healthy\" ) pass","title":"fail_init()"},{"location":"#bus_wx.bus_wx.BusWx.run","text":"Run the bus Source code in bus_wx/bus_wx.py def run ( self ): \"\"\"Run the bus\"\"\" while True : try : self . loop . run_until_complete ( self . __async__run ()) self . fail_init () except Exception as e : self . logger . error ( str ( e )) time . sleep ( 10 ) self . fail_check ()","title":"run()"}]}